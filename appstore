#!/usr/bin/env ./node_modules/coffee-script/bin/coffee

global.util = require 'util'
global.async = require 'async'
cluster = require 'cluster'
os = require 'os'
proc = require 'child_process'
fs = require 'fs'
colors = require 'colors'
appenv = require './lib/BigbangEnv'

#global.APP = require "./app.js"
global.APP =
    name: 'appstore'
    cluster: false

prodMode = if process.argv[3] is '-p' then true else false
###
The point of prod mode is to ensure that if there is an unexpected exception in the prod environment,
the app should die, and upstart should restart it or the worker will die and the master will restart it.
This should keep the apps memory etc 'clean' so no unexpected behavior happens.
Without the prodMode flag, the app will hang instead of dying.  This is more helpful for developing
because the app will restart when a file is changed such as when the exception is fixed
###


global.logPrefix = "#{APP.name} [#{if cluster.isMaster then 'master' else 'worker'} #{process.pid}]"

if prodMode then log "Starting in Production Mode"

appPath = "."
process.env.NODE_PATH += ":#{appPath}:#{__dirname}"

process.on 'uncaughtException', (err) ->
    notify "[#{APP.name}] UNCAUGHT EXCEPTION", err.stack or err, true
    if prodMode then process.exit(1)

if process.env.PROC_MASTER or APP.name is 'repl'

    if cluster.isMaster and APP.cluster is true
        console.log 'ima master', process.pid
        process.on 'exit', ->
            log 'exit!'
            for id, worker of cluster.workers
                worker.destroy()


        numWorkers = CONFIG.workers ? os.cpus().length
        for idx in [1..numWorkers]
            worker = cluster.fork()
            notify "[#{APP.name}] birth", "worker #{worker.process.pid} started"


        log "spawned #{numWorkers} workers"
        cluster.on 'exit', (worker, code, signal) ->
            if code
                notify "[#{APP.name}] death", "worker #{worker.process.pid} died :(", true
            else
                notify "[#{APP.name}] death", "worker #{worker.process.pid} exited", false

            if prodMode
                if code isnt 0
                    cluster.fork()
                    notify "[#{APP.name}] birth", "worker #{worker.process.pid} started"

                if Object.keys(cluster.workers).length is 0
                    notify "[#{APP.name}] exit", "no workers remaining"
                    process.exit 0
            else
                hang = ->
                    setTimeout (->
                        process.nextTick hang), 60000
                hang()


    else
        express = require('express');
        app = express();

        app.get '/', (request, response) ->
            response.send "This would be some HTML"


        app.get '/app/hello', (request, response) ->
            kanbanApp = {
                uri: "localhost:3000/repo/hello/index.html"
            }
            response.contentType = 'application/json'

            response.send( kanbanApp )

        log "__dirname=#{__dirname}/public"
        app.use express.static("#{__dirname}/public")

        app.listen 3000

else
    master = null
    startMaster = ->
        master = proc.spawn __filename, process.argv.slice(2), _.extend process.env, {PROC_MASTER: true}
        master.stdout.on 'data', (buffer) ->
            process.stdout.write buffer.toString()
        master.stderr.on 'data', (buffer) ->
            unless buffer.toString().match /WARNING/ then notify "ERROR FROM MASTER", buffer.toString().trim(), true
        process.stdin.resume()
        process.stdin.pipe master.stdin
        master.on 'exit', exit
        return master

    exit = (code, signal) ->
        # notify "master #{master.pid} exit", "exit with code #{code}, signal #{signal}", false
        if signal is 'SIGUSR2'
            master = startMaster()
        else if prodMode
            process.exit code

    master = startMaster();


    onChange = (file) =>
        notify "#{APP.name} Restarting", "#{file.substr file.lastIndexOf('/') + 1} changed"
        if master.exitCode?
            master = startMaster()
        else
            master.kill('SIGUSR2')

    watching = {}

    watch = (file) =>
        if watching[file]? then return
        watching[file] = true
        fs.stat file, (err, stats) =>
            throw err if err?
            if stats.isDirectory()
                watchDir file

            fs.watchFile file, {interval: 500, persistent: true}, (cur, prev) =>
                if cur and +cur.mtime isnt +prev.mtime
                    if stats.isDirectory()
                        watchDir file
                    onChange(file)

    watchDir = (dir) ->
        fs.readdir dir, (err, files) =>
            if err?
                notify "error", err, true
                return
            for file in files
                file = dir + "/" + file
                do (file) =>
                    if watching[file]? then return
                    watching[file] = true
                    fs.stat file, (err, stats) =>
                        throw err if err?
                        if stats.isDirectory()
                            watchDir file

                        fs.watchFile file, {interval: 500, persistent: true}, (cur, prev) =>
                            if cur and +cur.mtime isnt +prev.mtime
                                if stats.isDirectory()
                                    watchDir file
                                onChange(file)

    #watchDir appPath
    watch('./appstore')
    watchDir './lib'
    watchDir './config'